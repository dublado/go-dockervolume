syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

package dockervolume;

message Volume {
  string name = 1;
  map<string, string> opts = 2;
  string mountpoint = 3;
}

message Volumes {
  repeated Volume volume = 1;
}

message NameOptsRequest {
  string name = 1;
  map<string, string> opts = 2;
}

message NameRequest {
  string name = 1;
}

message ActivateResponse {
  repeated string implements = 1;
}

message ErrResponse {
  string err = 1;
}

message MountpointErrResponse {
  string mountpoint = 1;
  string err = 2;
}

service API {
  rpc Activate(google.protobuf.Empty) returns (ActivateResponse) {
    option (google.api.http) = {
      post: "/Plugin.Activate"
      body: "*"
    };
  }
  rpc Create(NameOptsRequest) returns (ErrResponse) {
    option (google.api.http) = {
      post: "/VolumeDriver.Create"
      body: "*"
    };
  }
  rpc Remove(NameRequest) returns (ErrResponse) {
    option (google.api.http) = {
      post: "/VolumeDriver.Remove"
      body: "*"
    };
  }
  rpc Path(NameRequest) returns (MountpointErrResponse) {
    option (google.api.http) = {
      post: "/VolumeDriver.Path"
      body: "*"
    };
  }
  rpc Mount(NameRequest) returns (MountpointErrResponse) {
    option (google.api.http) = {
      post: "/VolumeDriver.Mount"
      body: "*"
    };
  }
  rpc Unmount(NameRequest) returns (ErrResponse) {
    option (google.api.http) = {
      post: "/VolumeDriver.Unmount"
      body: "*"
    };
  }
  rpc Cleanup(google.protobuf.Empty) returns (Volumes) {
    option (google.api.http) = {
      get: "/api/cleanup"
    };
  }
  rpc GetVolume(NameRequest)  returns (Volume) {
    option (google.api.http) = {
      get: "/api/volumes/{name}"
    };
  }
  rpc ListVolumes(google.protobuf.Empty) returns (Volumes) {
    option (google.api.http) = {
      get: "/api/volumes"
    };
  }
}
