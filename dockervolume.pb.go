// Code generated by protoc-gen-go.
// source: dockervolume.proto
// DO NOT EDIT!

package dockervolume

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import google_api1 "google/api"
import google_protobuf1 "go.pedge.io/google-protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Volume struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Opts       map[string]string `protobuf:"bytes,2,rep,name=opts" json:"opts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mountpoint string            `protobuf:"bytes,3,opt,name=mountpoint" json:"mountpoint,omitempty"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}

func (m *Volume) GetOpts() map[string]string {
	if m != nil {
		return m.Opts
	}
	return nil
}

type Volumes struct {
	Volume []*Volume `protobuf:"bytes,1,rep,name=volume" json:"volume,omitempty"`
}

func (m *Volumes) Reset()         { *m = Volumes{} }
func (m *Volumes) String() string { return proto.CompactTextString(m) }
func (*Volumes) ProtoMessage()    {}

func (m *Volumes) GetVolume() []*Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

type NameOptsRequest struct {
	Name string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Opts map[string]string `protobuf:"bytes,2,rep,name=opts" json:"opts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NameOptsRequest) Reset()         { *m = NameOptsRequest{} }
func (m *NameOptsRequest) String() string { return proto.CompactTextString(m) }
func (*NameOptsRequest) ProtoMessage()    {}

func (m *NameOptsRequest) GetOpts() map[string]string {
	if m != nil {
		return m.Opts
	}
	return nil
}

type NameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NameRequest) Reset()         { *m = NameRequest{} }
func (m *NameRequest) String() string { return proto.CompactTextString(m) }
func (*NameRequest) ProtoMessage()    {}

type ActivateResponse struct {
	Implements []string `protobuf:"bytes,1,rep,name=implements" json:"implements,omitempty"`
}

func (m *ActivateResponse) Reset()         { *m = ActivateResponse{} }
func (m *ActivateResponse) String() string { return proto.CompactTextString(m) }
func (*ActivateResponse) ProtoMessage()    {}

type ErrResponse struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *ErrResponse) Reset()         { *m = ErrResponse{} }
func (m *ErrResponse) String() string { return proto.CompactTextString(m) }
func (*ErrResponse) ProtoMessage()    {}

type MountpointErrResponse struct {
	Mountpoint string `protobuf:"bytes,1,opt,name=mountpoint" json:"mountpoint,omitempty"`
	Err        string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *MountpointErrResponse) Reset()         { *m = MountpointErrResponse{} }
func (m *MountpointErrResponse) String() string { return proto.CompactTextString(m) }
func (*MountpointErrResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Activate(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ActivateResponse, error)
	Create(ctx context.Context, in *NameOptsRequest, opts ...grpc.CallOption) (*ErrResponse, error)
	Remove(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ErrResponse, error)
	Path(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*MountpointErrResponse, error)
	Mount(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*MountpointErrResponse, error)
	Unmount(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ErrResponse, error)
	Cleanup(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Volumes, error)
	GetVolume(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Volume, error)
	ListVolumes(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Volumes, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Activate(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ActivateResponse, error) {
	out := new(ActivateResponse)
	err := grpc.Invoke(ctx, "/dockervolume.API/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Create(ctx context.Context, in *NameOptsRequest, opts ...grpc.CallOption) (*ErrResponse, error) {
	out := new(ErrResponse)
	err := grpc.Invoke(ctx, "/dockervolume.API/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Remove(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ErrResponse, error) {
	out := new(ErrResponse)
	err := grpc.Invoke(ctx, "/dockervolume.API/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Path(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*MountpointErrResponse, error) {
	out := new(MountpointErrResponse)
	err := grpc.Invoke(ctx, "/dockervolume.API/Path", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Mount(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*MountpointErrResponse, error) {
	out := new(MountpointErrResponse)
	err := grpc.Invoke(ctx, "/dockervolume.API/Mount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Unmount(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ErrResponse, error) {
	out := new(ErrResponse)
	err := grpc.Invoke(ctx, "/dockervolume.API/Unmount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Cleanup(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Volumes, error) {
	out := new(Volumes)
	err := grpc.Invoke(ctx, "/dockervolume.API/Cleanup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetVolume(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := grpc.Invoke(ctx, "/dockervolume.API/GetVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListVolumes(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Volumes, error) {
	out := new(Volumes)
	err := grpc.Invoke(ctx, "/dockervolume.API/ListVolumes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Activate(context.Context, *google_protobuf1.Empty) (*ActivateResponse, error)
	Create(context.Context, *NameOptsRequest) (*ErrResponse, error)
	Remove(context.Context, *NameRequest) (*ErrResponse, error)
	Path(context.Context, *NameRequest) (*MountpointErrResponse, error)
	Mount(context.Context, *NameRequest) (*MountpointErrResponse, error)
	Unmount(context.Context, *NameRequest) (*ErrResponse, error)
	Cleanup(context.Context, *google_protobuf1.Empty) (*Volumes, error)
	GetVolume(context.Context, *NameRequest) (*Volume, error)
	ListVolumes(context.Context, *google_protobuf1.Empty) (*Volumes, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Activate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NameOptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Remove(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Path_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Path(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Mount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Unmount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Cleanup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetVolume(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).ListVolumes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dockervolume.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _API_Activate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _API_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _API_Remove_Handler,
		},
		{
			MethodName: "Path",
			Handler:    _API_Path_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _API_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _API_Unmount_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _API_Cleanup_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _API_GetVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _API_ListVolumes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
